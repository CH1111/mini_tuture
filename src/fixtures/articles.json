[
  {
    "id": "34a473b",
    "title": "Taro 小程序开发大型实战（一）：熟悉的 React，熟悉的 Hooks",
    "cover": "https://static.tuture.co/c/34a473b/taro-cover-1.jpg",
    "content": "对于国内 React 开发者来说，Taro 的出现无疑是福音 —— 它能够让我们用熟悉的 React 代码去搭建各类小程序，并且一份代码可以编译成多个平台的应用（目前包括微信小程序、支付宝小程序、React Native、H5 等等）。随着 Taro 的不断进化，它对 React 代码的支持程度越来越好，所支持的目标平台也越来越多，学习的价值自然不必多言。正值 Taro 进入 2.0.0 版本的 beta 阶段，我们在这一篇教程将手把手带你实现一个能够部署到多端的小程序，让你感受 Taro 的强大与魅力！在这一系列教程中，我们将构建一个多端小程序应用 —— 奥特曼俱乐部（Ultraman Club，简称 UltraClub），一个支持多端登录（微信和支付宝）的类似贴吧的小程序。我们还提供了项目仓库的 GitHub 地址。项目目前还在开发阶段，您可以跳转到任意一次 commit 查看当前步骤的所有代码哦。\n对于国内 React 开发者来说，Taro 的出现无疑是福音 —— 它能够让我们用熟悉的 React 代码去搭建各类小程序，并且一份代码可以编译成多个平台的应用（目前包括微信小程序、支付宝小程序、React Native、H5 等等）。随着 Taro 的不断进化，它对 React 代码的支持程度越来越好，所支持的目标平台也越来越多，学习的价值自然不必多言。正值 Taro 进入 2.0.0 版本的 beta 阶段，我们在这一篇教程将手把手带你实现一个能够部署到多端的小程序，让你感受 Taro 的强大与魅力！在这一系列教程中，我们将构建一个多端小程序应用 —— 奥特曼俱乐部（Ultraman Club，简称 UltraClub），一个支持多端登录（微信和支付宝）的类似贴吧的小程序。我们还提供了项目仓库的 GitHub 地址。项目目前还在开发阶段，您可以跳转到任意一次 commit 查看当前步骤的所有代码哦。\n对于国内 React 开发者来说，Taro 的出现无疑是福音 —— 它能够让我们用熟悉的 React 代码去搭建各类小程序，并且一份代码可以编译成多个平台的应用（目前包括微信小程序、支付宝小程序、React Native、H5 等等）。随着 Taro 的不断进化，它对 React 代码的支持程度越来越好，所支持的目标平台也越来越多，学习的价值自然不必多言。正值 Taro 进入 2.0.0 版本的 beta 阶段，我们在这一篇教程将手把手带你实现一个能够部署到多端的小程序，让你感受 Taro 的强大与魅力！在这一系列教程中，我们将构建一个多端小程序应用 —— 奥特曼俱乐部（Ultraman Club，简称 UltraClub），一个支持多端登录（微信和支付宝）的类似贴吧的小程序。我们还提供了项目仓库的 GitHub 地址。项目目前还在开发阶段，您可以跳转到任意一次 commit 查看当前步骤的所有代码哦。\n对于国内 React 开发者来说，Taro 的出现无疑是福音 —— 它能够让我们用熟悉的 React 代码去搭建各类小程序，并且一份代码可以编译成多个平台的应用（目前包括微信小程序、支付宝小程序、React Native、H5 等等）。随着 Taro 的不断进化，它对 React 代码的支持程度越来越好，所支持的目标平台也越来越多，学习的价值自然不必多言。正值 Taro 进入 2.0.0 版本的 beta 阶段，我们在这一篇教程将手把手带你实现一个能够部署到多端的小程序，让你感受 Taro 的强大与魅力！在这一系列教程中，我们将构建一个多端小程序应用 —— 奥特曼俱乐部（Ultraman Club，简称 UltraClub），一个支持多端登录（微信和支付宝）的类似贴吧的小程序。我们还提供了项目仓库的 GitHub 地址。项目目前还在开发阶段，您可以跳转到任意一次 commit 查看当前步骤的所有代码哦。"
  },
  {
    "id": "af69225",
    "title": "Taro 小程序开发大型实战（二）：多页面跳转和 Taro UI 组件库",
    "cover": "https://static.tuture.co/c/34a473b/taro-cover-2.jpg",
    "content": "在上一篇教程中，我们用熟悉的 React 和 Hooks 搞定了 “奥特曼俱乐部” 的雏形。在这一篇文章中，我们将用 Taro 自带的路由功能实现多页面跳转，并用 Taro UI 组件库升级之前略显简陋的界面。现在让我们开始实现项目的其他页面吧，包括：帖子详情 post：进入单篇帖子的详情页面我的 mine：显示当前用户的个人信息（在后面的步骤中将实现登录注册哦）。其中，帖子详情页面中将复用前面编写的 PostCard 组件。为了方便管理，我们需要引入一个新的 prop（isList），用于判断此组件是显示在首页列表中，还是在帖子详情页面中。在上一篇教程中，我们用熟悉的 React 和 Hooks 搞定了 “奥特曼俱乐部” 的雏形。在这一篇文章中，我们将用 Taro 自带的路由功能实现多页面跳转，并用 Taro UI 组件库升级之前略显简陋的界面。现在让我们开始实现项目的其他页面吧，包括：帖子详情 post：进入单篇帖子的详情页面我的 mine：显示当前用户的个人信息（在后面的步骤中将实现登录注册哦）。其中，帖子详情页面中将复用前面编写的 PostCard 组件。为了方便管理，我们需要引入一个新的 prop（isList），用于判断此组件是显示在首页列表中，还是在帖子详情页面中。在上一篇教程中，我们用熟悉的 React 和 Hooks 搞定了 “奥特曼俱乐部” 的雏形。在这一篇文章中，我们将用 Taro 自带的路由功能实现多页面跳转，并用 Taro UI 组件库升级之前略显简陋的界面。现在让我们开始实现项目的其他页面吧，包括：帖子详情 post：进入单篇帖子的详情页面我的 mine：显示当前用户的个人信息（在后面的步骤中将实现登录注册哦）。其中，帖子详情页面中将复用前面编写的 PostCard 组件。为了方便管理，我们需要引入一个新的 prop（isList），用于判断此组件是显示在首页列表中，还是在帖子详情页面中。在上一篇教程中，我们用熟悉的 React 和 Hooks 搞定了 “奥特曼俱乐部” 的雏形。在这一篇文章中，我们将用 Taro 自带的路由功能实现多页面跳转，并用 Taro UI 组件库升级之前略显简陋的界面。现在让我们开始实现项目的其他页面吧，包括：帖子详情 post：进入单篇帖子的详情页面我的 mine：显示当前用户的个人信息（在后面的步骤中将实现登录注册哦）。其中，帖子详情页面中将复用前面编写的 PostCard 组件。为了方便管理，我们需要引入一个新的 prop（isList），用于判断此组件是显示在首页列表中，还是在帖子详情页面中。在上一篇教程中，我们用熟悉的 React 和 Hooks 搞定了 “奥特曼俱乐部” 的雏形。在这一篇文章中，我们将用 Taro 自带的路由功能实现多页面跳转，并用 Taro UI 组件库升级之前略显简陋的界面。现在让我们开始实现项目的其他页面吧，包括：帖子详情 post：进入单篇帖子的详情页面我的 mine：显示当前用户的个人信息（在后面的步骤中将实现登录注册哦）。其中，帖子详情页面中将复用前面编写的 PostCard 组件。为了方便管理，我们需要引入一个新的 prop（isList），用于判断此组件是显示在首页列表中，还是在帖子详情页面中。"
  },
  {
    "id": "5e10118",
    "title": "Taro 小程序开发大型实战（三）：实现微信和支付宝多端登录",
    "cover": "https://static.tuture.co/c/34a473b/taro-cover-3.jpg",
    "content": "与普通的 Web 应用相比，小程序能够在所在的平台实现一键登录，非常方便。这一步，我们也将实现多端登录（主要包括微信登录和支付宝登录）。之所以标题取为“群魔乱舞”，不仅受了“震惊”小编们的启发，也是因为当今各平台处理登录和鉴权的方式差异很大，很遗憾的是在 Taro 框架下我们依然需要踩很多“坑”才能真正实现“多端登录”。这一节的代码很长，在正式开始之前我们先查看一下组件设计的规划，便于你对接下来我们要做的工作有清晰的了解。至此，《Taro 多端小程序开发大型实战》第三篇也就结束啦。在接下来的第四篇中，我们将逐步用 Redux 来重构业务数据流，让我们现在略显臃肿的状态管理变得清晰可控。与普通的 Web 应用相比，小程序能够在所在的平台实现一键登录，非常方便。这一步，我们也将实现多端登录（主要包括微信登录和支付宝登录）。之所以标题取为“群魔乱舞”，不仅受了“震惊”小编们的启发，也是因为当今各平台处理登录和鉴权的方式差异很大，很遗憾的是在 Taro 框架下我们依然需要踩很多“坑”才能真正实现“多端登录”。这一节的代码很长，在正式开始之前我们先查看一下组件设计的规划，便于你对接下来我们要做的工作有清晰的了解。至此，《Taro 多端小程序开发大型实战》第三篇也就结束啦。在接下来的第四篇中，我们将逐步用 Redux 来重构业务数据流，让我们现在略显臃肿的状态管理变得清晰可控。与普通的 Web 应用相比，小程序能够在所在的平台实现一键登录，非常方便。这一步，我们也将实现多端登录（主要包括微信登录和支付宝登录）。之所以标题取为“群魔乱舞”，不仅受了“震惊”小编们的启发，也是因为当今各平台处理登录和鉴权的方式差异很大，很遗憾的是在 Taro 框架下我们依然需要踩很多“坑”才能真正实现“多端登录”。这一节的代码很长，在正式开始之前我们先查看一下组件设计的规划，便于你对接下来我们要做的工作有清晰的了解。至此，《Taro 多端小程序开发大型实战》第三篇也就结束啦。在接下来的第四篇中，我们将逐步用 Redux 来重构业务数据流，让我们现在略显臃肿的状态管理变得清晰可控。与普通的 Web 应用相比，小程序能够在所在的平台实现一键登录，非常方便。这一步，我们也将实现多端登录（主要包括微信登录和支付宝登录）。之所以标题取为“群魔乱舞”，不仅受了“震惊”小编们的启发，也是因为当今各平台处理登录和鉴权的方式差异很大，很遗憾的是在 Taro 框架下我们依然需要踩很多“坑”才能真正实现“多端登录”。这一节的代码很长，在正式开始之前我们先查看一下组件设计的规划，便于你对接下来我们要做的工作有清晰的了解。至此，《Taro 多端小程序开发大型实战》第三篇也就结束啦。在接下来的第四篇中，我们将逐步用 Redux 来重构业务数据流，让我们现在略显臃肿的状态管理变得清晰可控。与普通的 Web 应用相比，小程序能够在所在的平台实现一键登录，非常方便。这一步，我们也将实现多端登录（主要包括微信登录和支付宝登录）。之所以标题取为“群魔乱舞”，不仅受了“震惊”小编们的启发，也是因为当今各平台处理登录和鉴权的方式差异很大，很遗憾的是在 Taro 框架下我们依然需要踩很多“坑”才能真正实现“多端登录”。这一节的代码很长，在正式开始之前我们先查看一下组件设计的规划，便于你对接下来我们要做的工作有清晰的了解。至此，《Taro 多端小程序开发大型实战》第三篇也就结束啦。在接下来的第四篇中，我们将逐步用 Redux 来重构业务数据流，让我们现在略显臃肿的状态管理变得清晰可控。"
  },
  {
    "id": "5e100f7",
    "title": "Taro 小程序开发大型实战（四）：使用 Hooks 版的 Redux 实现应用状态管理",
    "cover": "https://static.tuture.co/c/34a473b/taro-cover-4.jpg",
    "content": "如果你跟着敲到了这里，你一定会发现现在 的状态管理和数据流越来越臃肿，组件状态的更新非常复杂。在这一篇中，我们将开始用 Redux 重构，因为此次重构涉及的改动文件有点多，所以这一步使用 Redux 重构我们分两篇文章来讲解，这篇是上篇。写到这一步，我们发现状态已经有点多了，而且 src/pages/mine/mine.jsx 文件是众多状态的顶层组件，比如我们的普通登录按钮   src/components/LoginButton/index.jsx 组件和我们的 src/components/Footer/index.jsx 组件，我们通过点击普通登录按钮打开登录弹窗的状态 isOpened 需要在 LoginButton 里面进行操作，然后进而影响到 Footer 组件内的 FloatLayout 弹窗组件，像这种涉及到多个子组件进行通信，我们将状态保存到公共父组件中的方式在 React 中叫做 ”状态提升“。但是随着状态增多，状态提升的状态也随着增多，导致保存这些状态的父组件会臃肿不堪，而且每次状态的改变需要影响很多中间组件，带来极大的性能开销，这种状态管理的难题我们一般交给专门的状态管理容器 Redux 来做，而让 React  专注于渲染用户界面。Redux 不仅可以保证状态的可预测性，还能保证状态的变化只和对应的组件相关，不影响到无关的组件，关于 Redux 的详细剖析的实战教程可以参考图雀社区的：Redux 包教包会系列文章。在这一节中，我们将结合 React Hooks 和 Redux 来重构我们状态管理。如果你跟着敲到了这里，你一定会发现现在 的状态管理和数据流越来越臃肿，组件状态的更新非常复杂。在这一篇中，我们将开始用 Redux 重构，因为此次重构涉及的改动文件有点多，所以这一步使用 Redux 重构我们分两篇文章来讲解，这篇是上篇。写到这一步，我们发现状态已经有点多了，而且 src/pages/mine/mine.jsx 文件是众多状态的顶层组件，比如我们的普通登录按钮   src/components/LoginButton/index.jsx 组件和我们的 src/components/Footer/index.jsx 组件，我们通过点击普通登录按钮打开登录弹窗的状态 isOpened 需要在 LoginButton 里面进行操作，然后进而影响到 Footer 组件内的 FloatLayout 弹窗组件，像这种涉及到多个子组件进行通信，我们将状态保存到公共父组件中的方式在 React 中叫做 ”状态提升“。但是随着状态增多，状态提升的状态也随着增多，导致保存这些状态的父组件会臃肿不堪，而且每次状态的改变需要影响很多中间组件，带来极大的性能开销，这种状态管理的难题我们一般交给专门的状态管理容器 Redux 来做，而让 React  专注于渲染用户界面。Redux 不仅可以保证状态的可预测性，还能保证状态的变化只和对应的组件相关，不影响到无关的组件，关于 Redux 的详细剖析的实战教程可以参考图雀社区的：Redux 包教包会系列文章。在这一节中，我们将结合 React Hooks 和 Redux 来重构我们状态管理。"
  },
  {
    "id": "b32362b",
    "title": "Taro 小程序开发大型实战（五）：尝鲜微信小程序云",
    "cover": "https://static.tuture.co/c/34a473b/taro-cover-7.jpg",
    "content": "为了将数据持久化存储和高效的查询，我们需要把数据存储到数据库中，为了实现⼩程序端便捷的开发体验，⼀大批小程序 Serverless 服务兴起，⽽微信⼩程序云正是为了微信⼩程序的快速开发⽽生的。在这篇⽂章中，我们将使⽤微信小程序云作为我们的后端，并讲解如何引入和实现 Redux 异步工作流来实现小程序端访问⼩程序云的状态管理。在前面的代码中，我们通过将数据保存在 Storage 里面来完成数据的持久化，这样可以解决小规模数据的存储和查询问题，一旦数据量变大了，那么查询和存储就需要依靠专门的数据库来解决了，一般我们可以通过自建后端和数据库的方式来解决，但当小程序正越来越火的同时，一种被称为 Serverless 的模式被提出并也逐渐火爆起来，通俗意义上来概括就是 “无后端”，即把后端交给云服务厂商（阿里云、腾讯云、京东云等），开发者只需要专注于前端逻辑，快速交付功能。在这一节中，我们使用微信小程序云作为我们的 “后端”，微信小程序云和小程序账号绑定在一起，一个小程序账号可以开通一个小程序云空间，接下来我们来详细讲解如何开通小程序云。为了将数据持久化存储和高效的查询，我们需要把数据存储到数据库中，为了实现⼩程序端便捷的开发体验，⼀大批小程序 Serverless 服务兴起，⽽微信⼩程序云正是为了微信⼩程序的快速开发⽽生的。在这篇⽂章中，我们将使⽤微信小程序云作为我们的后端，并讲解如何引入和实现 Redux 异步工作流来实现小程序端访问⼩程序云的状态管理。在前面的代码中，我们通过将数据保存在 Storage 里面来完成数据的持久化，这样可以解决小规模数据的存储和查询问题，一旦数据量变大了，那么查询和存储就需要依靠专门的数据库来解决了，一般我们可以通过自建后端和数据库的方式来解决，但当小程序正越来越火的同时，一种被称为 Serverless 的模式被提出并也逐渐火爆起来，通俗意义上来概括就是 “无后端”，即把后端交给云服务厂商（阿里云、腾讯云、京东云等），开发者只需要专注于前端逻辑，快速交付功能。在这一节中，我们使用微信小程序云作为我们的 “后端”，微信小程序云和小程序账号绑定在一起，一个小程序账号可以开通一个小程序云空间，接下来我们来详细讲解如何开通小程序云。为了将数据持久化存储和高效的查询，我们需要把数据存储到数据库中，为了实现⼩程序端便捷的开发体验，⼀大批小程序 Serverless 服务兴起，⽽微信⼩程序云正是为了微信⼩程序的快速开发⽽生的。在这篇⽂章中，我们将使⽤微信小程序云作为我们的后端，并讲解如何引入和实现 Redux 异步工作流来实现小程序端访问⼩程序云的状态管理。在前面的代码中，我们通过将数据保存在 Storage 里面来完成数据的持久化，这样可以解决小规模数据的存储和查询问题，一旦数据量变大了，那么查询和存储就需要依靠专门的数据库来解决了，一般我们可以通过自建后端和数据库的方式来解决，但当小程序正越来越火的同时，一种被称为 Serverless 的模式被提出并也逐渐火爆起来，通俗意义上来概括就是 “无后端”，即把后端交给云服务厂商（阿里云、腾讯云、京东云等），开发者只需要专注于前端逻辑，快速交付功能。在这一节中，我们使用微信小程序云作为我们的 “后端”，微信小程序云和小程序账号绑定在一起，一个小程序账号可以开通一个小程序云空间，接下来我们来详细讲解如何开通小程序云。"
  }
]
